#define VK_W		    0x11
#define VK_A		    0x1e
#define VK_S		    0x1f
#define VK_D		    0x20
#define RIGHT_ARROW 0xcd
#define LEFT_ARROW  0xcb

#define RADIUS 5
#define SCALE 10

#define MOVSPEED 3

struct { x1, y1, x2, y2, tx1, ty1, tz1, tx2, ty2, tz2 } wall_s;
struct { ang, wall_s wall } world_s;
struct { x, y, r, ang } player_s;

() {
	static world_s world;

	world.ang     = 0;
	world.wall.x1 =	70*SCALE;
	world.wall.y1 =	20*SCALE;
	world.wall.x2 =	70*SCALE;
	world.wall.y2 =	70*SCALE;

	static player_s player;

	player.x   = xres/2; // Starting x
	player.y   = yres/2; // Starting y
	player.r   = radius; // Player radius
	player.ang = 0;
	
	while (1) {
		cls(0);
		drawmap(world, player);
		moveplayer(world);
		drawplayer(player);
		sleep(1);
		refresh();
	}
}

drawmap(world_s world, player_s player) {
	// Transform the wall vertices based upon the
	// player's position.
	world.wall.tx1 = world.wall.x1 - player.x;
	world.wall.tx2 = world.wall.x2 - player.x;
	world.wall.ty1 = world.wall.y1 - player.y;
	world.wall.ty2 = world.wall.y2 - player.y;
	
	world.wall.tz1 = 
		world.wall.tx1 * cos(world.ang) + 
		world.wall.ty1 * sin(world.ang);
	world.wall.tz2 = 
		world.wall.tx2 * cos(world.ang) + 
		world.wall.ty2 * sin(world.ang);
	world.wall.tx1 = 
		world.wall.tx1 * sin(world.ang) - 
		world.wall.ty1 * cos(world.ang);
	world.wall.tx2 = 
		world.wall.tx2 * sin(world.ang) - 
		world.wall.ty2 * cos(world.ang);

	setcol(0xffff00);
	moveto(player.x - world.wall.tx1, player.y - world.wall.tz1);
	lineto(player.x - world.wall.tx2, player.y - world.wall.tz2);
}

drawplayer(player_s player) {
	setcol(0x00ff00);
	drawsph(player.x, player.y, -player.r);
	setcol(0xff0000);
	moveto(player.x, player.y);
	lineto(player.x, player.y - SCALE);
}

moveplayer(world_s world) {
	if (keystatus[VK_W]) { // (Move forward)
		world.wall.x1 -= cos( world.ang ) * MOVSPEED;
		world.wall.x2 -= cos( world.ang ) * MOVSPEED;
		world.wall.y1 -= sin( world.ang ) * MOVSPEED;
		world.wall.y2 -= sin( world.ang ) * MOVSPEED;
	}

	if (keystatus[VK_S]) { // (Move backward)
		world.wall.x1 += cos( world.ang ) * MOVSPEED;
		world.wall.x2 += cos( world.ang ) * MOVSPEED;
		world.wall.y1 += sin( world.ang ) * MOVSPEED;
		world.wall.y2 += sin( world.ang ) * MOVSPEED;
	}

	if (keystatus[RIGHT_ARROW]) { // Right-arrow key (Turn right)
		world.ang += 0.025;
	}

	if (keystatus[LEFT_ARROW]) { // Left-arrow key (Turn left)
		world.ang -= 0.025;
	}

	if (keystatus[VK_A]) { // (Strafe right)
		world.wall.x1 -= sin( world.ang ) * MOVSPEED;
		world.wall.x2 -= sin( world.ang ) * MOVSPEED;
		world.wall.y1 += cos( world.ang ) * MOVSPEED;
		world.wall.y2 += cos( world.ang ) * MOVSPEED;
	}

	if (keystatus[VK_D]) { // (Strafe left)
		world.wall.x1 += sin( world.ang ) * MOVSPEED;
		world.wall.x2 += sin( world.ang ) * MOVSPEED;
		world.wall.y1 -= cos( world.ang ) * MOVSPEED;
		world.wall.y2 -= cos( world.ang ) * MOVSPEED;
	}
	
	// ==================== Check Collisions ======================
	// No collision detection yet.
}
