#define VK_W        0x11
#define VK_A        0x20
#define VK_S        0x1f
#define VK_D        0x1e
#define RIGHT_ARROW 0xcd
#define LEFT_ARROW  0xcb

#define RADIUS 5
#define SCALE 10

struct { x1, y1, x2, y2 } wall_s;
struct { x, y, r, ang } player_s;

() {
	static wall_s wall;

	wall.x1 = 70*SCALE;
	wall.y1 = 20*SCALE;
	wall.x2 = 70*SCALE;
	wall.y2 = 70*SCALE;

	static player_s player;

	player.x   = xres/2; // Starting x
	player.y   = yres/2; // Starting y
	player.r   = RADIUS; // Player radius
	player.ang = 0;      // Starting direction

	while (1) {
		cls(0);
		drawmap(wall);
		moveplayer(player, wall);
		drawplayer(player);
		sleep(1);
		refresh();
	}
}

drawmap(wall_s wall) {
	setcol(0xffff00);
	moveto(wall.x1, wall.y1);
	lineto(wall.x2, wall.y2);
}

drawplayer(player_s player) {
	setcol(0x00ff00);
	drawsph(player.x, player.y, -player.r);
	setcol(0xff0000 );
	moveto(player.x, player.y);
	lineto(player.x + cos(player.ang) * 15, 
	       player.y + sin(player.ang) * 15);
}

moveplayer( player_s player, wall_s wall ) {
	if (keystatus[VK_W]) { // (Move forward)
		player.x += cos(player.ang);
		player.y += sin(player.ang);
	}
	if (keystatus[VK_S]) { // (Move backward)
		player.x -= cos(player.ang);
		player.y -= sin(player.ang);
	}
	if (keystatus[RIGHT_ARROW]) { // Right-arrow key (Turn right)
		player.ang += 0.025;
	}
	if (keystatus[LEFT_ARROW]) { // Left-arrow key (Turn left)
		player.ang -= 0.025;
	}
	if (keystatus[VK_D]) { // (Strafe right)
		player.x += sin(player.ang);
		player.y -= cos(player.ang);
	}
	if (keystatus[VK_A]) { // (Strafe left)
		player.x -= sin(player.ang);
		player.y += cos(player.ang);
	}
	
	// =================== Check Collisions =====================
	
	// With window bounds:
	if (player.x - player.r < 0)    player.x = player.r;
	if (player.x + player.r > xres) player.x = xres - player.r;
	if (player.y - player.r < 0)    player.y = player.r;
	if (player.y + player.r > yres) player.y = yres - player.r;
	
	// With wall location:
	//
	// Note:
	// This collision detection is not dynamic, and only works
	// with this specific wall. I will need to rework the algorithm
	// for slanted walls, and sectors, in general.
	//
	// At this moment, I believe a simple written algorithm for a sector
	// implementation would be to check which sector the player is in,
	// and then loop through all the possible walls the player could
	// collide with whilst checking if the player's coordinates have
	// exceeded the bounds of said walls.
	if (player.y > wall.y1 && player.y < wall.y2) {
	
		// What side of the wall is the player on
		if (player.x < wall.x1) { // Right side
			
			if (player.x + player.r > wall.x1)
				player.x = wall.x1 - player.r;

		} else if (player.x > wall.x1) { // Left side
		
			if (player.x - player.r < wall.x1)
				player.x = wall.x1 + player.r;
		
		}
	}
}
